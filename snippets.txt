npm i video-js zustand zod react-hook-form nodemailer lucide-react iron-session handlebars date-fns crypto

//const include: Record<string, Record<string, boolean>> = {};
const include: Record<string, string[]> = {};

for (const r of resources) {
  for (const field of r.form) {
    if (field.type === "m2m") {
      if (!include[r.model]) include[r.model] = [];
      include[r.model].push(field.name);
      //if (!include[r.model]) include[r.model] = {};
      //include[r.model][field.name] = true;
    }
    /*if (field.type === 'fileUpload') {
      if (!files[r.model]) files[r.model] = [];
      files[r.model].push(field.name);
    }*/
  }
}

/*const models = resources.map((r) => ({
  model: r.model,
  resource: r.resource,
  relations: include[r.model] || [],
  //files: files[r.model] || [],
}));*/

if (filter.search) {
      const arr = filter.search.split("_");
      const field = arr.shift();
      const query = arr.reverse().reduce((res: any, key: string) => ({ [key]: res }), value);
      
      where[field] = query;
      return;
    }  

    if (key.includes("_")) {
      const arr = key.split("_");
      const field = arr.shift();
      const query = arr.reverse().reduce((res, key) => ({ [key]: res }), value);
      acc[field!] = query;
    } else {
      acc[key] = value;
    }

    resource?.filter.forEach((field) => {
    const value = searchParams.get('filters');
    console.log(value);
    console.log(JSON.parse(value as string));
    if (value) {
      /*if (field.type === "text") {
        where[field.name] = `contains__${value}`;
      } else if (field.type === "select-filter") {
        where[field.search!] = `in__${value}`;
      }*/
    }
  });

  /*resource?.filter.forEach((field) => {
    const value = searchParams.get(field.name);
    if (value) {
      if (field.type === "text") {
        where[field.name] = `contains__${value}`;
      } else if (field.type === "select-filter") {
        where[field.search!] = `in__${value}`;
      }
    }
  });*/

  export function getWhere(where: any) {
  return Object.keys(where).reduce((acc, key) => {
    let value = where[key];
    if (value === null || value === undefined || value === "") {
      return acc;
    }

    if (value.includes("__")) {
      let [operator, val] = value.split("__");
      if (operator === "in") {
        val = val.split(",").map((v: any) => parseFloat(v) || v);
      }
      console.log(val);
      value = { [operator]: val };
    }

    if (key.includes("_")) {
      const arr = key.split("_");
      const field = arr.shift();
      const query = arr.reverse().reduce((res, key) => ({ [key]: res }), value);
      acc[field!] = query;
    } else {
      acc[key] = value;
    }
    return acc;
  }, {} as Record<string, unknown>);
}

/*let token;
  const state = store.getState();
  const userState = state?.user?.currentUser;
  if (userState === null) {
    token = "";
  } else {
    const { accessToken } = userState;
    token = accessToken;
  }

  token !== "" &&
    (client.defaults.headers.common.Authorization = `Bearer ${token}`);*/

    export function getWhere(where: any) {
  return Object.keys(where).reduce((acc, key) => {
    let value = where[key];
    if (value === null || value === undefined || value === "") {
      return acc;
    }

    if (value.includes("__")) {
      let [operator, val] = value.split("__");
      if (operator === "in") {
        val = val.split(",").map((v: any) => parseFloat(v) || v);
      }
      value = { [operator]: val };
    }

    if (key.includes("_")) {
      const arr = key.split("_");
      const field = arr.shift();
      const query = arr.reverse().reduce((res, key) => ({ [key]: res }), value);
      acc[field!] = query;
    } else {
      acc[key] = value;
    }
    return acc;
  }, {} as Record<string, unknown>);
}

export function htmlToJson(div: Element) {
  var tag: Record<string, any> = {};
  tag["tagName"] = div.tagName;
  tag["children"] = [];
  for (var i = 0; i < div.children.length; i++) {
    tag["children"].push(htmlToJson(div.children[i]));
  }
  for (var i = 0; i < div.attributes.length; i++) {
    var attr = div.attributes[i];
    tag["@" + attr.name] = attr.value;
  }
  return tag;
}

export function renderSelectOptions(data: any[], render: any) {
  return data.map((value: any) => ({
    value: value.id,
    label: render(value),
  }));
}

export function getSelectOptions(data: any[], labelKey: any) {
  return data.map((value: any) => ({
    value: value.id,
    label: value[labelKey],
  }));
}

export function toPlainObject(args: any) {
  return JSON.parse(JSON.stringify(args));
}

import { TableData } from "@/components/table/table";
import { getFiltersStateParser, getSortingStateParser } from "@/lib/parsers";
import { FormField } from "@/resources/resources.types";
import {
  parseAsFloat,
  createSearchParamsCache,
  parseAsInteger,
  parseAsStringEnum
} from 'nuqs/server'
 
export const searchParamsCache = createSearchParamsCache({
  page: parseAsInteger.withDefault(1),
  perPage: parseAsInteger.withDefault(10),
  sort: getSortingStateParser<TableData>().withDefault([
    { id: "createdAt", desc: true },
  ]),
  //from: parseAsString.withDefault(""),
  //to: parseAsString.withDefault(""),
  // advanced filter
  filters: getFiltersStateParser().withDefault([]),
  joinOperator: parseAsStringEnum(["and", "or"]).withDefault("and"),
});

export const groupArrayByKey = function (xs: any[], key: any) {
  return xs.reduce(function (rv, x) {
    (rv[x[key]] = rv[x[key]] || []).push(x);
    return rv;
  }, {});
};
